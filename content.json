{"pages":[{"title":"404","text":"","path":"404/index.html","date":"04-11","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"04-11","excerpt":""}],"posts":[{"title":"游戏机制——高级游戏设计技术笔记","text":"一、设计游戏机制 1.1 游戏的定义 ● 规则是游戏的本质特性 ● 游戏可以理解为状态机，类似dvd播放机 1.2 游戏的不可预测性 ● 游戏应有不可预测性 ● 游戏不可预测性的产生要素 ○ 偶然性 ○ 让玩家做选择 ○ 设计能衍生复杂玩法的规则 1.3 规则与机制 ● 规则 明晓 ● 机制 隐藏 详尽 涵盖一切要素 ● 核心机制 隐藏 无明显界限 ● 游戏机制 ○ 物理机制：物体的位置，移动方向以及物体之间的重叠碰撞是最主要的计算任务。但游戏中的物理没那么严谨 ○ 内部经济：游戏元素的收集，消费和交易构成了内部经济。健康，声望，魔力等抽象的概念也同样属于游戏经济 ○ 渐进机制：关卡设计规定了玩家在世界中能够如何行动。玩家的进度被限制。这些都是这种渐进机制的例子 ○ 战术机动：可以将单位分配到地图上的特定位置，从而获得进攻或防守上的优势。不仅在策略游戏重要，在rpg游戏也一样重要 ○ 社交互动：rpg游戏有有规定角色应该如何进行表演的规则。策略类游戏有可能会规定玩家之间如何结盟和解盟的规则 ● 机制独立于媒介，移植方便 ● 游戏机制提供可玩性，但美术音乐剧情贡献不一定更少 1.4 连续机制与离散机制 ● 连续机制 ○ 物理机制通常是连续的 ○ 连续机制需要大量的数学运算 ● 离散机制 ○ 内部经济机制通常是离散的 ○ 离散机制能给人更多的创新机会 ○ 计算机技术的成熟使得模拟物理机制较为容易，但经济机制复杂高深，难以设计 1.5 游戏设计流程 ● 强调的是以玩家为中心的设计 ● 概念设计阶段 ○ 确定总体概念、目标受众、玩家所扮演的角色，并产生一份愿景文档 ○ 快速的为基本机制开发一个试验性版本 ● 详细设计阶段 ○ 创建游戏机制和关卡、撰写故事情节、制作美术资源等 ○ 保持短期迭代开发，逐渐增加可玩的功能或原型 ○ 找开发组外部人员来试玩 ● 调整阶段 ○ 特性冻结，做减法 1.6 原型制作技术 ● 一些术语 ○ 高保真原型 ○ 低保真原型 ○ 垂直切片 ○ 水平切片 ● 三种原型 ○ 软件原型 很好评估可玩性，慢、贵 ○ 纸面原型 无需依赖计算机，快速且易于修改 ○ 物理原型 简单地起草出规则并在现实世界中测试它们 1.7 游戏原型聚焦点 ● 技术演示 ● 游戏经济 ● 界面和操作方案 ● 教程 二、突现和渐进 2.1 突现型和渐进型 ● 突现型游戏 ○ 规则简单但变化多样 ○ 突现是最原始的游戏机制 ● 渐进型游戏 ○ 提供一系列预设的挑战，每一种挑战仅有一种解决方案，挑战的次序固定 ○ 任何有攻略流程的游戏都是渐进型游戏 2.2 突现型与渐进型对比 ● 突现型游戏规则较少、要素关联性高、概率空间大而广 ● 渐进型游戏规则较多、要素关联性低、概率空间窄而深 ● 理论上看，突现是最有趣的结构 ● 游戏应该是过程密集的而不是数据密集的 ● 现代游戏都是混合型的 ● 突现型机制并不比渐进型机制更优秀，它们只是不同而已 2.3 突现型游戏 ● 突现一词早就出现了，即系统的行为特性无法沟通过他的各个组成部分直接推导出来的现象 ● 突现特性不是源于游戏单个组成部分的复杂性，而是源于游戏各个部分之间相互作用产生的复杂性 ● 追求用较少的规则产生较多的状态，构造简单却能产生出突现型玩法的游戏系统的机制 ● 概率空间的面积越大，可玩性越高 ● 实例《文明》 2.4 渐进型游戏 ● 渐进型机制对拥有出色的关卡和有趣的交互式故事的游戏至关重要 ● 设计师指定玩家首先遇到哪些游戏元素，拥有哪些初始资源，为了过关必须完成那些任务等等。可以决定玩家拥有的能力，利用关卡布局来控制玩家的进度 ● 《半条命》的轨道引导，《塞尔达传说》的辐射式布局和锁-钥匙机制 ● 关卡的物理布局和其中关键道具的位置是控制玩家进度的重要工具。确保玩家有机会学习并应用那些过关必须的技巧 三、复杂系统和突现结构 3.1 游戏的一致性比写实性更重要 ● FPS中的“火箭跳”，火箭爆炸会对周围的物体产生冲击力，玩家可以利用这个冲击力使得自己跳的更高 3.2 秩序和混沌 ● 复杂系统的行为表现可能是有序的，也可能是混沌的，或者介于两者之间 ● 有序系统好预测，混沌系统不好预测 ● 复杂系统的行为模式：秩序——周期性系统——实现行为——混沌 3.3 复杂系统的结构特性 ● 复杂系统存在蝴蝶效应 ● 活跃并相互关联的组成部分 ○ 细胞自动机——一系列简单的规则集合。这些规则控制一行/一个格子的状态（黑/白）。规则决定格子颜色改变的条件，以及当前格子如何影响其他格子。细胞自动机的规则没有任何随机性，但是产生出独特且看似随机的图形 ○ 动态行为的系统的三个关键特性： ○ 系统必须由相对简单的方式将每个组成部分分个别的描述出来 ○ 系统必须支持远程信息传递 ○ 系统组成单元的活跃程度能够有效的反映出系统行为的复杂度 ○ 复杂系统的构建门槛很低 ○ 系统元素的活跃度和相关联度是很好的指示器。可以用于将突现型游戏和渐进型游戏分开 ● 反馈循环 ○ 负反馈可以保持系统平衡，正反馈会导致系统失稳 ○ 生态系统中猎物和捕食者数量的稳定就是因为反馈 ● 对突现进行分类 ○ 微小突现：要么不存在反馈，要么反馈只发生在同一规模级别中的各个元素之间 ○ 弱突现：在系统不同层级之间实现自顶向下的反馈。如果单位即能感知周围同类的行为，又能感知它所在的群体的整体状态。就会产生群体行为 ○ 多重突现：有多种反馈，跨越了不同的规模级别。小范围的正反馈和大范围的负反馈 ○ 强突现：各规模级别间的较大差异。 3.4 驾驭游戏中的突现特性 ● 活跃并互相关联的系统组成部分+反馈循环+系统的不同规模级别+等等=游戏的结构特性 四、内部经济 4.1 内部经济的核心要素 ● 资源、实体、四种机制（来源、消耗器、转换器、交易器） 4.2 经济结构 ● 负反馈引发均衡，正反馈引发军备竞赛 ● 正反馈机制可能造成死锁和相互依赖现象 ● 玩家技巧、资源分布、游戏地形会影响到游戏经济运行 ● 注意由玩家双方所持资源的差异而产生的负反馈机制引起的动态均衡 ● 皮筋约束 4.3 内部经济在游戏中的应用 ● 补强物理机制 ● 面包屑机制 ● 增益道具构成的经济机制 ● 内部经济机制影响游戏进程 ● 让资源不断重生，避免死锁 ● 引入策略性的玩法","path":"2019/04/13/游戏机制——高级游戏设计技术笔记/","date":"04-13","excerpt":"","tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/笔记/"}]},{"title":"如何阅读一本书笔记","text":"一、阅读的层次 1.1 阅读的艺术 ● 在于尽可能掌握住每一种信息的技巧 ● 是一个凭借头脑运作，不假任何外助，以一己之力提升自我的过程 1.2 阅读的目标 ● 为获得资讯 ● 为求得理解 1.3 两种学习类型 ● 指导型学习，立足于被传达的信息 ● 自我发现型学习，立足于自然或世界 1.4 阅读的层次 ● 基础阅读 ● 检视阅读 ● 分析阅读 ● 主题阅读 1.5 层次间关系 ● 阅读层次是渐进的，第四层是最高层次，包括了所有阅读层次，也超越了所有阅读层次 1.6 第一层次，基础阅读 ● 阅读准备阶段 ● 阅读简单读物 ● 快速建立字汇的能力 ● 精炼增进技巧 ● 消化阅读经验 1.7 第二层次，检视阅读 ● 有系统的略读或粗读 ○ 先看书名页 ○ 研究目录页 ○ 检阅索引 ○ 查看出版者介绍 ○ 挑与主题息息相关的篇章看 ○ 把书打开，东翻西翻，直至翻完全书 ○ 建议把自己想象成侦探，寻找书的主题或思想的线索 ● 粗浅的阅读 ○ 难懂的书，一气通贯，不要停 ○ 不要企图了解每一个字句 ○ 重视书的大原则而非细微点 1.8 阅读的速度 ● 依照读物性质 ● 依照文本难度 1.9 做一个自我要求的读者 ● 提问题 ○ 这本书整体在讲什么 ○ 这本书细节讲了什么，怎么讲的 ○ 这本书有道理吗 ○ 这本书和你有什么关系 ● 做笔记 ○ 画底线 ○ 圈关键 ○ 双底线 ○ 做星号 ○ 做顺序编号 ○ 在空白处写下其他相关页码 ○ 在空白处做笔记 ● 笔记类型 ○ 结构笔记 ○ 书的类型、书的内容、书的架构 ○ 概念笔记 ○ 作者的观点、自己的观点 ○ 辨证笔记 ○ 针对一场讨论情景 二、第三层次，分析阅读 2.1 第一阶段：找出一本书的主旨规则 ● 依照书的种类与主题分类 ● 使用最简短的文字概括全书 ● 列出全书主要部分 ● 确定作者想解决的问题 2.2 第二阶段：诠释一本书的内容规则 ● 诠释作者的关键字 ● 抓住作者的重要主旨 ● 重构架构作者的论述 ● 确认书中已解决与未解决的问题 2.3 第三阶段：评论一本书的规则 ● 读懂之后再评论 ● 不要争强好胜 ● 证明真正知识与个人观点的不同 ● 批评时注意证明作者的知识不足、知识错误、结构不整、不合逻辑 2.4 辅助阅读 ● 寻找相关经验的角色 ● 寻找类似主题的书籍 ● 辩证运用主题和摘要 ● 学会用字典与工具书 2.5 规则的理想化 ● 规则只是衡量阅读层次的理想标准，在参考的基础上使用个性化方法，达到与自己相应的阅读层次 三、阅读不同读物的方法 3.1 实用性书籍 ● 书籍提供指引，实际问题只能靠行动解决 ● 理论性的原则会归纳出出色的行事规则 ● 从命令句寻找规则主旨 3.2 想象文学 ● 不要抗拒想象文学给你的影响力 ● 不要去找共识、主旨或论述 ● 不要用适用于传递知识与真理一致的标准来批评小说 ● 规则类似隐喻，不要太仔细验证这些规则 3.3 故事戏剧与诗歌 ● 属于纯艺术领域，不必采取实际行动 ● 重在感受与体验 ● 一气呵成，把我整体感觉 ● 大声带感情朗读 ● 了解作者与作品背景 3.4 历史书 ● 每本历史书都有一个特殊且有限定范围的主题 ● 纲要架构通常是固定的 ● 分辨作者主观心态与客观历史史实 3.5 科学与数学 ● 通过阅读一些伟大巨著来了解科学这门行业 ● 科学的客观不在于没有最初的偏见，而在于坦白承认 ● 掌握科学作品中的数学问题 ● 你的责任不是要成为这个主题专家，而是去了解相关问题 3.6 哲学书 ● 孩子是天生的发问者，用赤子之心看问题 ● 对待问题应单纯天真的提问，成熟睿智的回答 ● 重视思考在哲学领域的作用 ● 从抽象中找出中心思想 3.7 社会科学 ● 通常取材于读者所熟悉的经验 ● 作品混杂众多领域，甚至有的带有虚幻色彩 ● 关于一个主题通常要读好几本书 ● 着眼于特殊事件而非特殊的一本书 ● 更多运用主题阅读方法 四、第四层次，主题阅读 4.1 准备阶段：观察研究范围 ● 针对主题设计试验性书目并浏览 ● 确定与主题相关书目 4.2 进入正题：主题阅读本身 ● 找出与主题相关书目中最相关的章节 ● 根据主题，创造一套中立词汇 ● 列出问题，建立一个中立主旨 ● 界定主要与次要议题 ● 分析以上问题，保持疏离与客观 4.3 生命与心智的成长 ● 好的阅读，即主动的阅读，不仅对阅读本身有用，也不仅对工作事业有帮助，更能帮助我们的心智保持活力与增长","path":"2019/04/13/如何阅读一本书笔记/","date":"04-13","excerpt":"","tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/笔记/"}]},{"title":"git教程个人笔记","text":"一.控制系统集中式和分布式版本区别 1.1集中式 必须联网 版本库集中存放在中央服务器借书还书 1.2分布式 不用联网 版本库分散存放 安全性高 二.添加工作区文件到Git仓库，在repo文件夹下 2.1使用命令 git add file，把要提交的修改从工作区添加到暂存区（Stage），可以添加多次 git add readme.txt 2.2使用命令 git commit -m message，把暂存区的所有修改提交到版本库分支（Master），注释说明 git commit -m “wrote a readme file” 三.文件版本穿梭 3.1查看提交历史，带file为查看单个文件 git log file git log --pretty=oneline file 3.2查看命令历史，带file为查看单个文件 git reflog file git reflog --pretty=oneline file 3.3版本穿梭，git reset --hard commit_id git reset --hard 0ec438d 四.管理修改 4.1查看状态 git status 4.2查看修改，工作区与暂存区比对 git diff 4.3查看修改，暂存区与版本库比对 git diff --cached git diff --staged 4.4查看修改，工作区与版本库比对，git diff HEAD – file git diff HEAD – readme.txt 五.撤销修改 5.1撤回工作区最近一次文件修改，git checkout – file，或在文件管理器修改，本质为版本库版本替换工作区版本 git checkout – readme.txt 5.2撤回暂存区最近一次文件修改，git reset HEAD file git reset HEAD readme.txt 5.3撤回版本库修改，见3.3版本穿梭 git reset --hard commit_id 六.删除恢复文件 6.1删除工作区与版本库文件，git rm file，之后git commit git rm readme.txt git commit -m “remove readme.txt” 6.2恢复版本库文件，见3.3版本穿梭 git reset --hard commit_id 6.3恢复工作区文件，见5.1版本库版本替换工作区版本 git checkout – file 七.远程仓库Github 7.1一些指令 cd ~(进入用户主文件夹) cd .ssh(进入.ssh文件夹) ls(列出文件夹下目录) cat id_rsa.pub(查看id_rsa.pub内容) 7.2部署远程库 7.2.1关联一个远程库，git remote add origin git@server-name:path/repo-name.git git remote add origin git@github.com:alsrf/learngit.git 7.2.2第一次推送master分支所有内容 git push -u origin master 7.2.3将本地工作区最新修改推送至GitHub，先将工作区文件提交到版本库，然后使用命令 git push origin master 7.3从远程库克隆 在要获取文件的文件夹下使用命令，git clone git@server-name:path/repo-name.git git clone git@github.com:alsrf/gitskills.git","path":"2019/04/10/git教程个人笔记/","date":"04-10","excerpt":"","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/笔记/"}]},{"title":"markdown语法个人整理","text":"一、文字编辑 1.1 斜体 *斜体* or _斜体_ 斜体 1.2 粗体 **粗体** or __粗体__ 粗体 1.3 粗斜体 ***粗斜体*** or ___粗斜体___ 粗斜体 1.4 删除线 ~~删除线~~ 删除线 1.5 文字上标下标 &lt;sup&gt;文字上标&lt;/sup&gt; &lt;sub&gt;文字下标&lt;/sub&gt; 参照文字上标参照文字 参照文字下标参照文字 二、段落编辑 2.1 标题分级 # 一级标题 ## 二级标题 ###### 六级标题 一级标题 二级标题 ¶六级标题 2.2 行首缩进 &amp;ensp;半角空格 &amp;emsp;全角空格 参照文字 alsrf alsrf 2.3 引用文字 &gt; 引用文字 &gt;&gt; 引用文字层级 引用文字 层一 层二 2.4 无序列表 + 列表（加号+ 减号- 星号*） + 列表层级 ● 列表 ○ 列表层级 ○ 列表层级 ● 列表 ○ 列表层级 ○ 列表层级 2.5 有序列表 1. 列表一 2. 列表二 列表一 列表二 三、插入要素 3.1 代码区块 3.1.1 代码区块行中 `代码部分` 参照文字#include &lt;stdio.h&gt;参照文字 3.1.2 代码区块独立带行数 代码部分前后三个` 123456#include &lt;stdio.h&gt;int main()&#123; printf(&quot;Hello,World!\\n&quot;); return 0;&#125; 3.1.3 代码区块无行数 代码区块（开头缩进4个空格或1个tab） 通常用于输出带有特殊符号文本 ~!@#$%^&amp;*()_+ 3.2 转义字符 前加反斜杠 md中用到的主要可能有语法意义的非空白符号有：\\ ` * _ { } [ ] ( ) # + - . ! \\ 3.3 超链接 [链接标题](链接地址) 点此进入alsrf的小窝 3.4 添加图片 ![图片备注](插入的图片.jpg) 3.5 邮箱链接 &lt;邮箱地址&gt; 联系邮箱a2637435936@gmail.com","path":"2019/04/09/markdown语法个人整理/","date":"04-09","excerpt":"","tags":[{"name":"笔记","slug":"笔记","permalink":"http://yoursite.com/tags/笔记/"},{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"}]},{"title":"测试","text":"","path":"2019/04/08/测试/","date":"04-08","excerpt":"","tags":[]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","path":"2019/04/08/hello-world/","date":"04-08","excerpt":"","tags":[]}]}